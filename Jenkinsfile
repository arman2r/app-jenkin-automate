pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS 22.x'
    }
    
    environment {
        NODE_ENV = 'production'
        APP_NAME = 'my-app-nextjs'
        APP_PORT = '3000'
    }
    
    triggers {
        pollSCM('H/5 * * * *')
        githubPush()
    }
    
    stages {
        stage('Inicio') {
            steps {
                script {
                    currentBuild.description = "Build #${env.BUILD_NUMBER} - Iniciado"
                }
                echo 'üöÄ Iniciando pipeline de deployment...'
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'üì¶ Clonando repositorio...'
                checkout scm
                
                script {
                    def gitCommit = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    def gitAuthor = sh(returnStdout: true, script: 'git log -1 --pretty=format:%an').trim()
                    def gitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=format:%s').trim()
                    
                    echo "üë§ Autor: ${gitAuthor}"
                    echo "üìù Commit: ${gitCommit}"
                    echo "üí¨ Mensaje: ${gitMessage}"
                    
                    currentBuild.description = "${gitMessage} (${gitCommit})"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì• Instalando dependencias...'
                sh 'npm ci'
            }
        }
        
        stage('Lint') {
            steps {
                echo 'üîç Ejecutando linter...'
                sh 'npm run lint'
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Construyendo aplicaci√≥n Next.js...'
                sh 'npm run build'
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Ejecutando tests...'
                echo 'No hay tests configurados a√∫n'
            }
        }
        
        stage('Stop Previous Instance') {
            steps {
                echo 'üõë Deteniendo instancia anterior...'
                script {
                    sh '''
                        # Buscar y matar procesos en el puerto 3000
                        PID=$(lsof -ti:3000) || true
                        if [ ! -z "$PID" ]; then
                            kill -9 $PID
                            echo "Instancia anterior detenida (PID: $PID)"
                        else
                            echo "No hay instancia anterior corriendo"
                        fi
                    '''
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'üöÄ Desplegando aplicaci√≥n...'
                script {
                    sh '''
                        # Iniciar la aplicaci√≥n en segundo plano
                        nohup npm run start > /var/jenkins_home/workspace/vision-fe/app.log 2>&1 &
                        echo $! > /var/jenkins_home/workspace/vision-fe/app.pid
                        echo "Aplicaci√≥n iniciada con PID: $(cat /var/jenkins_home/workspace/vision-fe/app.pid)"
                    '''
                    sleep(time: 10, unit: 'SECONDS')
                    echo '‚úÖ Aplicaci√≥n desplegada en http://localhost:3000'
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo '‚ù§Ô∏è Verificando salud de la aplicaci√≥n...'
                script {
                    retry(3) {
                        sleep(time: 2, unit: 'SECONDS')
                        sh 'curl -f http://localhost:3000 || exit 0'
                        echo '‚úÖ Aplicaci√≥n respondiendo correctamente'
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                echo '========================================='
                echo '‚úÖ DEPLOYMENT EXITOSO'
                echo '========================================='
                echo "‚è±Ô∏è  Duraci√≥n: ${duration}"
                echo "üî¢ Build: #${env.BUILD_NUMBER}"
                echo "üåê URL: http://localhost:3000"
                echo "üìÖ ${new Date().format('dd/MM/yyyy HH:mm:ss')}"
                echo '========================================='
                
                currentBuild.result = 'SUCCESS'
            }
        }
        
        failure {
            script {
                echo '========================================='
                echo '‚ùå DEPLOYMENT FALLIDO'
                echo '========================================='
                echo "üî¢ Build: #${env.BUILD_NUMBER}"
                echo "üìÖ ${new Date().format('dd/MM/yyyy HH:mm:ss')}"
                echo '========================================='
                
                currentBuild.result = 'FAILURE'
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è Build inestable'
        }
        
        always {
            echo 'üèÅ Pipeline finalizado'
            echo "Estado final: ${currentBuild.result}"
        }
    }
}